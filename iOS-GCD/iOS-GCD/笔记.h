"什么是GCD"
全称是Grand Central dispatch
纯C语言，提供了非常多强大的函数

"GCD的优势"
GCD是苹果公司为多核的并行运算提出的解决方案
GCD会自动利用更多的CPU内核
CGD会自动管理线程的生命周期（创建线程、调度任务，销毁线程）
程序员只需告诉GCD想要执行什么任务，不需要编写很合线程管理代码


"GCD核心概念"
1.任务

2.队列

"GCD使用"
1.创建队列
2.封装任务，把任务添加到队列


"GCD中的队列"
(1)并发队列：任务可以同时执行
   "只要第一个任务取出来后，不用等待执行完，就可以接着取第二个任务"
   ①自己创建
   ②全部并发队列

(2)串行队列：任务必须一个接着一个执行
   "第一个任务取出来后，必须等待该任务执行完，才能接着取第二个任务"
   ①自己创建
   ②主队列

同步 + 主队列：线程死锁

"任务的执行方式"
同步执行：必须等当前任务执行完毕，才能执行后面的任务
异步执行：不必等当前任务执行完毕，就能执行后面的任务

"各种组合情况"
同步函数
        + 串行队列   不会开线程，所有的任务在当前线程串行执行
        + 并发队列   不会开线程，所有的任务在当前线程串行执行
        + 主队列     死锁

异步函数
        + 串行队列   会开1条线程，所有的任务在子线程串行执行
        + 并发队列   会开N条线程，所有的任务在子线程并发执行
        + 主队列     不会开线程， 所有的任务在主线程串行执行


"使用Create函数创建的并发队列和全局并发队列的主要区别"
1. 全局并发队列在整个应用程序中本身是默认存在的，并且对应有高优先级、默认优先级、低优先级和后台优先级一共四个并发队列。我们只是选择其中的一个直接拿来使用，而Create函数是实打实的从头开始创建一个队列
2. 在使用栅栏函数的时候，苹果官方明确规定栅栏函数只有在和使用create函数自己创建的并发队列一起使用的时候才有效



"==============================================================================="
"操作队列"
自定义队列：[[NSOperationQueue alloc] init]
          特点：默认并发队列，但是可以控制让它变成一个串行队列

主队列：[NSOperationQueue mainQueue]
       特点：串行队列，和主线程相关（凡是房子主队列中的任务都在主线程中执行）


"GCD和NSOperation对比"
1. GCD是纯C语言的API，而操作队列则是Object-c的对象
2. 在GCD中，任务用块(block)来表示，而块是个轻量级的数据结构；相反操作队列中的"操作"NSOperation
   则是个更加重量级的Object-C对象
3. 具体该使用GCD还是使用NSOperation需要看具体情况

"NSOperation和NSOperationQueue的好处"
1. NSOperationQueue可以方便的调用cancle方法来取消某个操作，而GCD中的任务是无法被取消的
2. NSOperation可以方便的指定操作间的依赖关系
3. NSOperation可以通过KVO提供对NSOperation对象的精细控制(如监听当前操作是否被取消或是否已完成等)
4. NSOperation可以方便的指定操作优先级，操作优先级表示此操作与队列中其它操作之间的优先关系
5. 通过自定义NSOperation的子类可以实现操作重用




